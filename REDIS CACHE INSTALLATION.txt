
In this video we will cover how to install Redis with Magento 2. We're using a base install of both Redis and Magento 2 on an Alpha Hosting Mercury package for the demo. 

I've included the commands we run in our terminal window and links to the Magento documentation we reference below. 

Here's the process;

- We always suggest making changes like this on a staging or development site. Setting up caching on a live site can be dangerous. At least make a quick backup of your site. 

- You'll need to install Redis. At Alpha Hosting that's a quick button click from the client portal. 

- Next, open a terminal window and login to the server. I'm using the cPanel terminal window, but feel free to use the terminal client of your choice. 

- In the terminal window navigate to your Magento 2 home directory. 

- We'll need to edit the env.php file so that Magento 2 knows to use Redis for default, page, and session caching. Let's make a quick copy of that file first using the following command:

cp /app/etc/env.php /app/etc/old.env.php

- Next we'll edit the env.php file using a series of commands. It's best to use commands instead of inline editing of the file. Using commands you won't mess up the syntax and you'll get a confirmation message when you're done. You can find these commands along with more info about Redis and Magento on the Magento DevDocs Site. 

(https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cache/redis/redis-pg-cache.html AND https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cache/redis/redis-session.html)

- Run the following command for setting up Redis as the default cache:

bin/magento setup:config:set --cache-backend=redis --cache-backend-redis-server=127.0.0.1 --cache-backend-redis-db=0

- Run the following command for setting up Redis as the page cache:

bin/magento setup:config:set --page-cache=redis --page-cache-redis-server=127.0.0.1 --page-cache-redis-db=1

- Run the following command for setting up Redis as the session cache:

bin/magento setup:config:set --session-save=redis --session-save-redis-host=127.0.0.1 --session-save-redis-log-level=4 --session-save-redis-db=2

That's it! You can run some test commands outlined in the DevDocs we linked above to confirm everything is setup correctly. In the video I do a very basic test visiting a page twice to show a speed enhancement. 

We hope this video helps. 

Please like and subscribe for more WooCommerce, WordPress, and Magento How To's:
https://www.youtube.com/channel/UCDxa...




=====================================================================================================================================================================
========================================================================================SECOND OPTION================================================================
https://www.mgt-commerce.com/tutorial/how-to-setup-redis-cache-for-magento-2/


Hi everybody, I am Cuong, Welcome back to my Magento 2 tutorial video series.
#magento #magento2 #magento2tutorial #redis
When you work with Magento 2, the cache is very important. It is one of the most effective ways to improve website performance. 

Magento recommends using Varnish, but you can use the following cache backends to speed up your website:

1. File system: This is the default, no configuration is necessary to use file system caching. All the cache files will be saved in the path var/cache or var/page_cache

2. Database: The caching objects are stored in the cache and cache_tag Magento 2 database tables. If you want to use this caching type, please see this link https://devdocs.magento.com/guides/v2...

3. Redis: This is popular, almost all Magento 2 websites are using this caching type to improve website performance.

In today's practice, I am going to share with everybody on How to install Redis and configure Magento to use Redis for session storage on Ubuntu.

My website is using the default cache of Magento 2, that is the file system.

For now, I will change it to the Redis cache.

Okie, let's go.

Let's do this practice, you need to follow steps by step:

Step 1: Install Redis cache on Ubuntu.
- cat /etc/*release
I have Ubuntu 18.04 on my server.
- Install Redis cache
apt-get install redis-server
- Verify that Redis is running on your server
1. service redis status
2. redis-cli ping
PONG should be the response.
3. Check the port is used for Redis
netstat -plnt
It is 6379

Step 2: Configure Magento to use Redis for session storage.
- Edit the file app/etc/env.php and add the following codes
- If you have multiple websites are using Redis cache on your server, you should change the value of "database" to another number. It is not allowed to duplicate on all websites.

Step 3: Test and See the result.
- Delete the folders var/cache and var/page_cache
- Access to the homepage, then check these folders. If Magento 2 doesn't generate these folders again. So Redis cache is applied to your website.
- I see my website is loaded faster than.
- Redis monitor command: redis-cli monitor
- Warning: After you use Redis cache for your website. Please don't use "php bin/magento cache:flush". If you use this command line, all the sessions for your website will be cleaned, so the customer will be logged out. You can use this command line as well "php bin/magento cache:clean"

Yeah! It works perfectly.

Thank you for your watching. If you have any questions about this practice, please feel free to leave a comment below.

Don't forget to like, comment, share my videos and subscribe to my channel for getting the latest videos.

Please do not hesitate to contact me, if you need me to join your Magento project. My rate is $25/hour in Magento 1 and $30/hour in Magento 2.
